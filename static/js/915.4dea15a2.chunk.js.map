{"version":3,"file":"static/js/915.4dea15a2.chunk.js","mappings":"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","sources":["webpack://react-rework-05-movies/./src/components/ActorProfile/ActorProfile.module.css?6f0a","components/ActorProfile/ActorProfile.jsx","webpack://react-rework-05-movies/./src/components/Button/Button.module.css?ce6f","components/Button/Button.jsx","webpack://react-rework-05-movies/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesList/MoviesList.jsx","webpack://react-rework-05-movies/./src/pages/ActorsAllMoviePage/ActorsAllMoviePage.module.css?d308","pages/ActorsAllMoviePage/ActorsAllMoviePage.jsx","services/movies-services.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapperImageAndText\":\"ActorProfile_wrapperImageAndText__1yi+H\",\"wrapperImageOnly\":\"ActorProfile_wrapperImageOnly__qNUpe\",\"actorImage\":\"ActorProfile_actorImage__nJa6S\",\"default\":\"ActorProfile_default__WXQps\",\"wrapperImageTexts\":\"ActorProfile_wrapperImageTexts__mR0qq\",\"actorNameAllMovies\":\"ActorProfile_actorNameAllMovies__BVwWW\",\"knownForAllMovies\":\"ActorProfile_knownForAllMovies__OTp-B\",\"actorPopularityAllMovies\":\"ActorProfile_actorPopularityAllMovies__wLh5P\",\"spanText\":\"ActorProfile_spanText__2xJFs\"};","import defaultProfile from '../../images/green-ava2.webp';\n\nimport s from './ActorProfile.module.css';\n\nconst ActorProfile = ({ baseUrl, data }) => {\n  return (\n    <div className={s.wrapperImageAndText}>\n      <div className={s.wrapperImageOnly}>\n        <img\n          src={\n            data.profile_path\n              ? `${baseUrl}${data.profile_path}`\n              : defaultProfile\n            //* fucking pictures and async loading\n          }\n          alt={data.name}\n          className={\n            data.profile_path ? s.actorImage : `${s.actorImage} ${s.default}`\n          }\n        />\n      </div>\n\n      <div className={s.wrapperImageTexts}>\n        <h2 className={s.actorNameAllMovies}>{data.name}</h2>\n        <p className={s.knownForAllMovies}>\n          <span className={s.spanText}>Known for: </span>\n          {Array.isArray(data.also_known_as)\n            ? data.also_known_as.join(', ')\n            : 'Unknown'}\n        </p>\n        <p className={s.actorPopularityAllMovies}>\n          <span className={s.spanText}>Place of birth: </span>\n          {data.place_of_birth}\n        </p>\n        <p className={s.actorPopularityAllMovies}>\n          <span className={s.spanText}>Birthday : </span>\n          {data.birthday}\n          <p className={s.actorPopularityAllMovies}>\n            <span className={s.spanText}>Deathday: </span>\n            {data.deathday || 'Still alive =)'}\n          </p>\n        </p>\n\n        <p className={s.actorPopularityAllMovies}>\n          <span className={s.spanText}>Popularity: </span>\n\n          {typeof data.popularity === 'number'\n            ? data.popularity.toFixed(2)\n            : 'Unknown'}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default ActorProfile;\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"Button_button__wiIYs\"};","import s from './Button.module.css';\n\nconst Button = ({ onClick, label, type = 'button', className = '' }) => {\n  return (\n    <button\n      className={`${s.button} ${className}`}\n      type={type}\n      onClick={onClick}\n    >\n      {label}\n    </button>\n  );\n};\n\nexport default Button;\n","// extracted by mini-css-extract-plugin\nexport default {\"listTrendingFilmsWrapper\":\"MoviesList_listTrendingFilmsWrapper__UJoXT\",\"itemMovie\":\"MoviesList_itemMovie__hT6qi\",\"linkMovieList\":\"MoviesList_linkMovieList__lRQLp\",\"imageTrendingMovie\":\"MoviesList_imageTrendingMovie__ZoTXz\",\"wrapperTrendingMovieTexts\":\"MoviesList_wrapperTrendingMovieTexts__BIRNN\",\"titleTrendMovie\":\"MoviesList_titleTrendMovie__n0G6+\",\"pWrapperTrendMovie\":\"MoviesList_pWrapperTrendMovie__79mO-\"};","import { Link, useLocation } from 'react-router-dom';\n\nimport defaultPoster from '../../images/lfc-logo.webp';\n\nimport s from './MoviesList.module.css';\n\nconst MoviesList = ({ data, baseUrl }) => {\n  const location = useLocation();\n\n  return (\n    <ul className={s.listTrendingFilmsWrapper}>\n      {data?.map(movie => (\n        <Link\n          className={s.linkMovieList}\n          to={`/movies/${movie.id}`}\n          state={location}\n        >\n          <li key={movie.id} className={s.itemMovie}>\n            <img\n              className={s.imageTrendingMovie}\n              src={\n                movie.poster_path\n                  ? `${baseUrl}/${movie.poster_path}`\n                  : defaultPoster\n              }\n              alt={movie.title}\n            />\n            <div className={s.wrapperTrendingMovieTexts}>\n              <h3 className={s.titleTrendMovie}>''{movie.title}''</h3>\n              <div className={s.pWrapperTrendMovie}>\n                <p>Rate:{movie.vote_average}/10</p>\n                <p>Year: {movie.release_date}</p>\n              </div>\n            </div>\n          </li>\n        </Link>\n      ))}\n    </ul>\n  );\n};\n\nexport default MoviesList;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapperActorsAllMoviePage\":\"ActorsAllMoviePage_wrapperActorsAllMoviePage__kasxw\",\"listAllActorMovies\":\"ActorsAllMoviePage_listAllActorMovies__twLiW\",\"itemAllMovies\":\"ActorsAllMoviePage_itemAllMovies__GgSZo\",\"movieImage\":\"ActorsAllMoviePage_movieImage__wS47h\",\"titleAllMovies\":\"ActorsAllMoviePage_titleAllMovies__xucDX\",\"textAllMovies\":\"ActorsAllMoviePage_textAllMovies__o3IqV\",\"loadMoreButtonActorAllMovies\":\"ActorsAllMoviePage_loadMoreButtonActorAllMovies__w2--B\"};","import { useParams, useSearchParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\n\nimport {\n  getActorPhotoAndInfo,\n  getMoviesByActor,\n} from 'services/movies-services';\n\nimport ActorProfile from 'components/ActorProfile/ActorProfile';\nimport Button from 'components/Button/Button';\nimport MoviesList from 'components/MoviesList/MoviesList';\n\nimport s from './ActorsAllMoviePage.module.css';\n\nconst ActorsAllMoviePage = () => {\n  const { actor_id } = useParams(); // считываем через useParams() --> actorId из URL\n  const [searchParams, setSearchParams] = useSearchParams();\n  const page = Number(searchParams.get('page')) || 1;\n  //\n  const [actorPhotoAndInfo, setActorPhotoAndInfo] = useState({});\n  const [movies, setMovies] = useState([]);\n  const [moviesCount, setMoviesCount] = useState(0);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const baseUrl = 'https://image.tmdb.org/t/p/w200';\n\n  useEffect(() => {\n    const fetchActorPhotoAndInfo = async () => {\n      try {\n        const result = await getActorPhotoAndInfo(actor_id);\n        // console.log('PhotoAndInfo from Api :>>', result);\n        setActorPhotoAndInfo(result);\n      } catch (error) {\n        console.error('Error fetching photo and info:', error);\n      }\n    };\n\n    fetchActorPhotoAndInfo();\n  }, [actor_id]);\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      setIsLoading(true);\n      try {\n        const result = await getMoviesByActor(actor_id, page);\n        // console.log('getMoviesByActor from Api :>>', result);\n        setMovies(prevMovies =>\n          page === 1 ? result.results : [...prevMovies, ...result.results]\n        );\n        setMoviesCount(result.results.length);\n      } catch (error) {\n        console.error('Error fetching movies:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovies();\n  }, [actor_id, page]);\n\n  const movieYearRealiseSorted = [...movies].sort((a, b) => {\n    const dateA = new Date(a.release_date);\n    const dateB = new Date(b.release_date);\n    return dateB - dateA;\n  });\n\n  const onLoadMoreActorAllMovies = () => {\n    setSearchParams({ page: page + 1 });\n  };\n\n  return (\n    <div className={s.wrapperActorsAllMoviePage}>\n      {actorPhotoAndInfo.name && (\n        <ActorProfile\n          actor_id={actor_id}\n          baseUrl={baseUrl}\n          data={actorPhotoAndInfo}\n        />\n      )}\n\n      <MoviesList data={movieYearRealiseSorted} baseUrl={baseUrl} />\n      {!isLoading && movies.length > 0 && moviesCount === 20 && (\n        <Button\n          onClick={onLoadMoreActorAllMovies}\n          label=\"Load more...\"\n          type=\"button\"\n          className={s.loadMoreButtonActorAllMovies}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ActorsAllMoviePage;\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxYTQ0NWVhZTQwMTY5ODllMGM1ZjVmNzg5MDRhYzE0YyIsIm5iZiI6MTczMTU5OTQyNS4xMDgyNTcsInN1YiI6IjY1ZGY2NDg3Yjc2Y2JiMDE2M2Q4MzNkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.O8jUWu95b2bCdx3mildt7AG2oKspuZGBhdzndcu47T0',\n  },\n};\n\nexport async function fetchTrendingMovies() {\n  const url = `${BASE_URL}/trending/movie/week?language=en-US`;\n\n  return fetch(url, options)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error('Failed to fetch trending movies');\n      }\n      return res.json();\n    })\n    .then(data => {\n      // console.log('Fetched movies:', data.results);\n      return data.results;\n    }) // Возвращаем массив фильмов\n\n    .catch(error => {\n      console.error('Error fetching trending movies:', error);\n      return null; // Возвращаем null в случае ошибки\n    });\n}\n\nexport async function getMoviesByQuery(query, page = 1) {\n  const url = `${BASE_URL}/search/movie?query=${query}&page=${page}`;\n\n  const result = await fetch(url, options);\n\n  if (!result.ok) throw new Error('Fetch failed');\n\n  return result.json();\n}\n\nexport async function fetchMovieDetails(movie_id) {\n  const url = `${BASE_URL}/movie/${movie_id}`;\n  // console.log('Fetching from URL:', url);\n\n  const result = await fetch(url, options);\n  if (!result.ok) throw new Error('Failed to fetch movie details');\n  return result.json();\n}\n\nexport async function fetchMovieCredits(movie_id) {\n  const url = `${BASE_URL}/movie/${movie_id}/credits`;\n\n  const result = await fetch(url, options);\n  if (!result.ok) throw new Error('Failed to fetch movie credits');\n  return result.json();\n}\n\nexport async function fetchMovieReviews(movie_id) {\n  const url = `${BASE_URL}/movie/${movie_id}/reviews`;\n\n  const result = await fetch(url, options);\n  if (!result.ok) throw new Error('Failed to fetch movie reviews');\n  return result.json();\n}\n\nexport async function getActorsByQuery(query, page = 1) {\n  const url = `${BASE_URL}/search/person?query=${query}&page=${page}`;\n\n  const result = await fetch(url, options);\n  if (!result.ok) throw new Error('No actors are found here.');\n  return result.json();\n}\n\nexport async function getMoviesByActor(actor_id, page = 1) {\n  const url = `${BASE_URL}/discover/movie?with_cast=${actor_id}&page=${page}`;\n\n  const result = await fetch(url, options);\n  if (!result.ok) throw new Error('Failed to fetch the movies of this actor');\n  return result.json();\n}\n\nexport async function getActorPhotoAndInfo(actor_id) {\n  const url = `${BASE_URL}/person/${actor_id}`;\n\n  const result = await fetch(url, options);\n  if (!result.ok) throw new Error('Failed to fetch actor photo & info');\n  return result.json();\n}\n"],"names":["_ref","baseUrl","data","_jsxs","className","s","children","_jsx","src","profile_path","defaultProfile","alt","name","Array","isArray","also_known_as","join","place_of_birth","birthday","deathday","popularity","toFixed","onClick","label","type","location","useLocation","map","movie","Link","to","id","state","poster_path","defaultPoster","title","vote_average","release_date","ActorsAllMoviePage","actor_id","useParams","searchParams","setSearchParams","useSearchParams","page","Number","get","actorPhotoAndInfo","setActorPhotoAndInfo","useState","movies","setMovies","moviesCount","setMoviesCount","isLoading","setIsLoading","useEffect","async","result","getActorPhotoAndInfo","error","console","fetchActorPhotoAndInfo","getMoviesByActor","prevMovies","results","length","fetchMovies","movieYearRealiseSorted","sort","a","b","dateA","Date","ActorProfile","MoviesList","Button","onLoadMoreActorAllMovies","BASE_URL","options","method","headers","accept","Authorization","fetchTrendingMovies","fetch","then","res","ok","Error","json","catch","getMoviesByQuery","query","url","arguments","undefined","fetchMovieDetails","movie_id","fetchMovieCredits","fetchMovieReviews","getActorsByQuery"],"sourceRoot":""}